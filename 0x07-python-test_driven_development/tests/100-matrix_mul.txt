========================
Matrix Multiplication
========================


Import module
========================
    >>> matrix_mul = __import__('100-matrix_mul').matrix_mul


Tests
========================


>>> matrix_mul()
Traceback (most recent call last):
...
TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

>>> matrix_mul([[1, 2],[3, 4]],[[1, 2],[2, 3],[4, 5]])
Traceback (most recent call last):
...
ValueError: m_a and m_b can't be multiplied

>>> matrix_mul([], [[1, 2]])
Traceback (most recent call last):
...
ValueError: m_a can't be empty

>>> matrix_mul([[1, 2]], [[]])
Traceback (most recent call last):
...
ValueError: m_b can't be empty

>>> matrix_mul([[]], [])
Traceback (most recent call last):
...
ValueError: m_a can't be empty

>>> matrix_mul("string", [[1, 2]])
Traceback (most recent call last):
...
TypeError: m_a must be a list

>>> matrix_mul([[1, 2]], "string")
Traceback (most recent call last):
...
TypeError: m_b must be a list

>>> matrix_mul = __import__('100-matrix_mul').matrix_mul

>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
[[7, 10], [15, 22]]

>>> matrix_mul([[1, 2]], [[3, 4], [5, 6]])
[[13, 16]]

>>> matrix_mul([[1.2, 5.5, 6.2], [4.66, 12.3, -9.2]],[[5.0, 3.3],[-2.9, 4.4],[7.2, 4.4]])
[[34.69, 55.44000000000001], [-78.61, 29.018000000000008]]

>>> matrix_mul([[1, 2.2, 3.3, 4],[5, 6, 7, 8.8]],[[1.1, 2, 3.3],[4.0, 5.5, 6],[7, 8, 9],[10.01, 11, 12.3]])
[[73.03999999999999, 84.5, 95.4], [166.58800000000002, 195.8, 223.74]]

>>> matrix_mul("", "")
Traceback (most recent call last):
...
TypeError: m_a must be a list

>>> matrix_mul(None, None)
Traceback (most recent call last):
...
TypeError: m_a must be a list

>>> matrix_mul([1, 2], [[3, 4]])
Traceback (most recent call last):
...
TypeError: m_a must be a list of lists

>>> matrix_mul([[1, 2]], [3, 4])
Traceback (most recent call last):
...
TypeError: m_b must be a list of lists

>>> matrix_mul([1, 2], [3, 4])
Traceback (most recent call last):
...
TypeError: m_a must be a list of lists

>>> matrix_mul([[1, "2"]], [[3, 4]])
Traceback (most recent call last):
...
TypeError: m_a should contain only integers or floats

>>> matrix_mul([[1, 2],[3, 4, 5]], [[1, 2],[3, 4]])
Traceback (most recent call last):
...
TypeError: each row of m_a must be of the same size

>>> matrix_mul([[1, 2],[3, 4]], [[1, 2],[3, 4, 5]])
Traceback (most recent call last):
...
TypeError: each row of m_b must be of the same size

>>> matrix_mul([[1, 2],[3, 4, 5]], [[1, 2],[3, 4, 5]])
Traceback (most recent call last):
...
TypeError: each row of m_a must be of the same size

>>> matrix_mul([[1, 2]], [[{"a": 1}, 2]])
Traceback (most recent call last):
...
TypeError: m_b should contain only integers or floats

>>> matrix_mul([[1, "2"]], [[{"a": 1}, 8.8]])
Traceback (most recent call last):
...
TypeError: m_a should contain only integers or floats

# Test case 1: Matrices with different dimensions
try:
    matrix_mul([[1, 2, 3], [4, 5, 6]], [[1, 2], [3, 4]])
except ValueError as e:
    print("Test case 1 passed:", e)
else:
    print("Test case 1 failed")

# Test case 2: Matrices with non-numeric elements
try:
    matrix_mul([[1, 'a'], [2, 3]], [['x', 4], [5, 6]])
except TypeError as e:
    print("Test case 2 passed:", e)
else:
    print("Test case 2 failed")

# Test case 3: Large matrices
matrix_a = [[1] * 100] * 100
matrix_b = [[1] * 100] * 100
result = matrix_mul(matrix_a, matrix_b)
expected_result = [[100] * 100] * 100
if result == expected_result:
    print("Test case 3 passed")
else:
    print("Test case 3 failed")

# Test case 4: Matrices with negative numbers
matrix_a = [[-1, -2], [-3, -4]]
matrix_b = [[-1, -2], [-3, -4]]
result = matrix_mul(matrix_a, matrix_b)
expected_result = [[5, 10], [15, 26]]
if result == expected_result:
    print("Test case 4 passed")
else:
    print("Test case 4 failed")

